{"ast":null,"code":"import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { parseFilterArgs } from '../core/utils';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useIsFetching(arg1, arg2) {\n  var queryClient = useQueryClient();\n\n  var _parseFilterArgs = parseFilterArgs(arg1, arg2),\n      filters = _parseFilterArgs[0];\n\n  var _React$useState = React.useState(queryClient.isFetching(filters)),\n      isFetching = _React$useState[0],\n      setIsFetching = _React$useState[1];\n\n  var filtersRef = React.useRef(filters);\n  filtersRef.current = filters;\n  var isFetchingRef = React.useRef(isFetching);\n  isFetchingRef.current = isFetching;\n  React.useEffect(function () {\n    return queryClient.getQueryCache().subscribe(notifyManager.batchCalls(function () {\n      var newIsFetching = queryClient.isFetching(filtersRef.current);\n\n      if (isFetchingRef.current !== newIsFetching) {\n        setIsFetching(newIsFetching);\n      }\n    }));\n  }, [queryClient]);\n  return isFetching;\n}","map":{"version":3,"sources":["/home/gudu/tryouts/My-Portfolio/Cart-Management_System/node_modules/react-query/es/react/useIsFetching.js"],"names":["React","notifyManager","parseFilterArgs","useQueryClient","useIsFetching","arg1","arg2","queryClient","_parseFilterArgs","filters","_React$useState","useState","isFetching","setIsFetching","filtersRef","useRef","current","isFetchingRef","useEffect","getQueryCache","subscribe","batchCalls","newIsFetching"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAmC;AACxC,MAAIC,WAAW,GAAGJ,cAAc,EAAhC;;AAEA,MAAIK,gBAAgB,GAAGN,eAAe,CAACG,IAAD,EAAOC,IAAP,CAAtC;AAAA,MACIG,OAAO,GAAGD,gBAAgB,CAAC,CAAD,CAD9B;;AAGA,MAAIE,eAAe,GAAGV,KAAK,CAACW,QAAN,CAAeJ,WAAW,CAACK,UAAZ,CAAuBH,OAAvB,CAAf,CAAtB;AAAA,MACIG,UAAU,GAAGF,eAAe,CAAC,CAAD,CADhC;AAAA,MAEIG,aAAa,GAAGH,eAAe,CAAC,CAAD,CAFnC;;AAIA,MAAII,UAAU,GAAGd,KAAK,CAACe,MAAN,CAAaN,OAAb,CAAjB;AACAK,EAAAA,UAAU,CAACE,OAAX,GAAqBP,OAArB;AACA,MAAIQ,aAAa,GAAGjB,KAAK,CAACe,MAAN,CAAaH,UAAb,CAApB;AACAK,EAAAA,aAAa,CAACD,OAAd,GAAwBJ,UAAxB;AACAZ,EAAAA,KAAK,CAACkB,SAAN,CAAgB,YAAY;AAC1B,WAAOX,WAAW,CAACY,aAAZ,GAA4BC,SAA5B,CAAsCnB,aAAa,CAACoB,UAAd,CAAyB,YAAY;AAChF,UAAIC,aAAa,GAAGf,WAAW,CAACK,UAAZ,CAAuBE,UAAU,CAACE,OAAlC,CAApB;;AAEA,UAAIC,aAAa,CAACD,OAAd,KAA0BM,aAA9B,EAA6C;AAC3CT,QAAAA,aAAa,CAACS,aAAD,CAAb;AACD;AACF,KAN4C,CAAtC,CAAP;AAOD,GARD,EAQG,CAACf,WAAD,CARH;AASA,SAAOK,UAAP;AACD","sourcesContent":["import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { parseFilterArgs } from '../core/utils';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useIsFetching(arg1, arg2) {\n  var queryClient = useQueryClient();\n\n  var _parseFilterArgs = parseFilterArgs(arg1, arg2),\n      filters = _parseFilterArgs[0];\n\n  var _React$useState = React.useState(queryClient.isFetching(filters)),\n      isFetching = _React$useState[0],\n      setIsFetching = _React$useState[1];\n\n  var filtersRef = React.useRef(filters);\n  filtersRef.current = filters;\n  var isFetchingRef = React.useRef(isFetching);\n  isFetchingRef.current = isFetching;\n  React.useEffect(function () {\n    return queryClient.getQueryCache().subscribe(notifyManager.batchCalls(function () {\n      var newIsFetching = queryClient.isFetching(filtersRef.current);\n\n      if (isFetchingRef.current !== newIsFetching) {\n        setIsFetching(newIsFetching);\n      }\n    }));\n  }, [queryClient]);\n  return isFetching;\n}"]},"metadata":{},"sourceType":"module"}