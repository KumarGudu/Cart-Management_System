{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { noop, parseMutationArgs } from '../core/utils';\nimport { MutationObserver } from '../core/mutationObserver';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useMutation(arg1, arg2, arg3) {\n  var options = parseMutationArgs(arg1, arg2, arg3);\n  var queryClient = useQueryClient(); // Create mutation observer\n\n  var observerRef = React.useRef();\n  var observer = observerRef.current || new MutationObserver(queryClient, options);\n  observerRef.current = observer; // Update options\n\n  if (observer.hasListeners()) {\n    observer.setOptions(options);\n  }\n\n  var _React$useState = React.useState(function () {\n    return observer.getCurrentResult();\n  }),\n      currentResult = _React$useState[0],\n      setCurrentResult = _React$useState[1]; // Subscribe to the observer\n\n\n  React.useEffect(function () {\n    return observer.subscribe(notifyManager.batchCalls(function (result) {\n      // Check if the component is still mounted\n      if (observer.hasListeners()) {\n        setCurrentResult(result);\n      }\n    }));\n  }, [observer]);\n  var mutate = React.useCallback(function (variables, mutateOptions) {\n    observer.mutate(variables, mutateOptions).catch(noop);\n  }, [observer]);\n\n  if (currentResult.error && observer.options.useErrorBoundary) {\n    throw currentResult.error;\n  }\n\n  return _extends({}, currentResult, {\n    mutate: mutate,\n    mutateAsync: currentResult.mutate\n  });\n}","map":{"version":3,"sources":["/home/gudu/tryouts/My-Portfolio/Cart-Management_System/node_modules/react-query/es/react/useMutation.js"],"names":["_extends","React","notifyManager","noop","parseMutationArgs","MutationObserver","useQueryClient","useMutation","arg1","arg2","arg3","options","queryClient","observerRef","useRef","observer","current","hasListeners","setOptions","_React$useState","useState","getCurrentResult","currentResult","setCurrentResult","useEffect","subscribe","batchCalls","result","mutate","useCallback","variables","mutateOptions","catch","error","useErrorBoundary","mutateAsync"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,IAAT,EAAeC,iBAAf,QAAwC,eAAxC;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,IAAjC,EAAuC;AAC5C,MAAIC,OAAO,GAAGP,iBAAiB,CAACI,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAA/B;AACA,MAAIE,WAAW,GAAGN,cAAc,EAAhC,CAF4C,CAER;;AAEpC,MAAIO,WAAW,GAAGZ,KAAK,CAACa,MAAN,EAAlB;AACA,MAAIC,QAAQ,GAAGF,WAAW,CAACG,OAAZ,IAAuB,IAAIX,gBAAJ,CAAqBO,WAArB,EAAkCD,OAAlC,CAAtC;AACAE,EAAAA,WAAW,CAACG,OAAZ,GAAsBD,QAAtB,CAN4C,CAMZ;;AAEhC,MAAIA,QAAQ,CAACE,YAAT,EAAJ,EAA6B;AAC3BF,IAAAA,QAAQ,CAACG,UAAT,CAAoBP,OAApB;AACD;;AAED,MAAIQ,eAAe,GAAGlB,KAAK,CAACmB,QAAN,CAAe,YAAY;AAC/C,WAAOL,QAAQ,CAACM,gBAAT,EAAP;AACD,GAFqB,CAAtB;AAAA,MAGIC,aAAa,GAAGH,eAAe,CAAC,CAAD,CAHnC;AAAA,MAIII,gBAAgB,GAAGJ,eAAe,CAAC,CAAD,CAJtC,CAZ4C,CAgBD;;;AAG3ClB,EAAAA,KAAK,CAACuB,SAAN,CAAgB,YAAY;AAC1B,WAAOT,QAAQ,CAACU,SAAT,CAAmBvB,aAAa,CAACwB,UAAd,CAAyB,UAAUC,MAAV,EAAkB;AACnE;AACA,UAAIZ,QAAQ,CAACE,YAAT,EAAJ,EAA6B;AAC3BM,QAAAA,gBAAgB,CAACI,MAAD,CAAhB;AACD;AACF,KALyB,CAAnB,CAAP;AAMD,GAPD,EAOG,CAACZ,QAAD,CAPH;AAQA,MAAIa,MAAM,GAAG3B,KAAK,CAAC4B,WAAN,CAAkB,UAAUC,SAAV,EAAqBC,aAArB,EAAoC;AACjEhB,IAAAA,QAAQ,CAACa,MAAT,CAAgBE,SAAhB,EAA2BC,aAA3B,EAA0CC,KAA1C,CAAgD7B,IAAhD;AACD,GAFY,EAEV,CAACY,QAAD,CAFU,CAAb;;AAIA,MAAIO,aAAa,CAACW,KAAd,IAAuBlB,QAAQ,CAACJ,OAAT,CAAiBuB,gBAA5C,EAA8D;AAC5D,UAAMZ,aAAa,CAACW,KAApB;AACD;;AAED,SAAOjC,QAAQ,CAAC,EAAD,EAAKsB,aAAL,EAAoB;AACjCM,IAAAA,MAAM,EAAEA,MADyB;AAEjCO,IAAAA,WAAW,EAAEb,aAAa,CAACM;AAFM,GAApB,CAAf;AAID","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { noop, parseMutationArgs } from '../core/utils';\nimport { MutationObserver } from '../core/mutationObserver';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useMutation(arg1, arg2, arg3) {\n  var options = parseMutationArgs(arg1, arg2, arg3);\n  var queryClient = useQueryClient(); // Create mutation observer\n\n  var observerRef = React.useRef();\n  var observer = observerRef.current || new MutationObserver(queryClient, options);\n  observerRef.current = observer; // Update options\n\n  if (observer.hasListeners()) {\n    observer.setOptions(options);\n  }\n\n  var _React$useState = React.useState(function () {\n    return observer.getCurrentResult();\n  }),\n      currentResult = _React$useState[0],\n      setCurrentResult = _React$useState[1]; // Subscribe to the observer\n\n\n  React.useEffect(function () {\n    return observer.subscribe(notifyManager.batchCalls(function (result) {\n      // Check if the component is still mounted\n      if (observer.hasListeners()) {\n        setCurrentResult(result);\n      }\n    }));\n  }, [observer]);\n  var mutate = React.useCallback(function (variables, mutateOptions) {\n    observer.mutate(variables, mutateOptions).catch(noop);\n  }, [observer]);\n\n  if (currentResult.error && observer.options.useErrorBoundary) {\n    throw currentResult.error;\n  }\n\n  return _extends({}, currentResult, {\n    mutate: mutate,\n    mutateAsync: currentResult.mutate\n  });\n}"]},"metadata":{},"sourceType":"module"}